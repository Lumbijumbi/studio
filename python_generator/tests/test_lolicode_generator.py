"""Tests for LoliCodeGenerator."""

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

import pytest
from generator.lolicode_generator import LoliCodeGenerator, generate_lolicode
from generator.types import (
    LoliCodeConfig,
    SemanticHarEntry,
    SemanticHarRequest,
    SemanticHarResponse,
    DependencyMatrix,
    CustomHeader,
    CustomAssertion,
    VariableExtraction,
    RequestBody,
)


class TestLoliCodeGenerator:
    """Tests for LoliCodeGenerator."""
    
    def setup_method(self):
        """Set up test fixtures."""
        self.generator = LoliCodeGenerator()
        
        # Create sample HAR entries
        self.entries = [
            SemanticHarEntry(
                request=SemanticHarRequest(
                    url='https://example.com/api/login',
                    method='POST',
                    headers={'content-type': 'application/json'},
                    cookies={},
                    body=RequestBody(
                        data='{"username":"test"}',
                        content_type='json'
                    )
                ),
                response=SemanticHarResponse(status=200)
            ),
            SemanticHarEntry(
                request=SemanticHarRequest(
                    url='https://example.com/api/data',
                    method='GET',
                    headers={'authorization': 'Bearer token'},
                    cookies={'session': 'abc123'}
                ),
                response=SemanticHarResponse(status=200)
            )
        ]
        
        # Create dependency matrix
        self.dependency_matrix = DependencyMatrix(
            topological_order=[0, 1]
        )
    
    @pytest.mark.asyncio
    async def test_generate_simple_script(self):
        """Test generating a simple script."""
        config = LoliCodeConfig(
            selected_indices=[0]
        )
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'Generated by HAR2LoliCode' in script
        assert 'REQUEST "https://example.com/api/login" POST' in script
        assert 'KEYCHECK SUCCESS' in script
        assert 'End of generated script' in script
    
    @pytest.mark.asyncio
    async def test_generate_multiple_requests(self):
        """Test generating script with multiple requests."""
        config = LoliCodeConfig(
            selected_indices=[0, 1]
        )
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'Request 1:' in script
        assert 'Request 2:' in script
        assert 'api/login' in script
        assert 'api/data' in script
    
    @pytest.mark.asyncio
    async def test_generate_with_settings(self):
        """Test generating script with settings."""
        config = LoliCodeConfig(
            selected_indices=[0],
            settings={
                'use_proxy': True,
                'timeout': 30,
                'retry_count': 3
            }
        )
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'SETTINGS' in script
        assert 'UseProxy: true' in script
        assert 'Timeout: 30' in script
        assert 'RetryCount: 3' in script
    
    @pytest.mark.asyncio
    async def test_generate_with_custom_headers(self):
        """Test generating script with custom headers."""
        config = LoliCodeConfig(
            selected_indices=[0],
            custom_headers={
                0: [
                    CustomHeader(key='X-Custom', value='test', enabled=True)
                ]
            }
        )
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'x-custom: test' in script
    
    @pytest.mark.asyncio
    async def test_generate_with_assertions(self):
        """Test generating script with custom assertions."""
        config = LoliCodeConfig(
            selected_indices=[0],
            custom_assertions={
                0: [
                    CustomAssertion(
                        type='contains',
                        value='success',
                        action='success'
                    )
                ]
            }
        )
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'Contains "success"' in script
    
    @pytest.mark.asyncio
    async def test_generate_with_extractions(self):
        """Test generating script with variable extractions."""
        config = LoliCodeConfig(
            selected_indices=[0],
            variable_extractions={
                0: [
                    VariableExtraction(
                        type='json',
                        pattern='$.token',
                        variable_name='auth_token',
                        is_global=True
                    )
                ]
            }
        )
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'PARSE "<RESPONSE.BODY>" JSON "$.token"' in script
        assert 'VAR "auth_token"' in script
    
    @pytest.mark.asyncio
    async def test_invalid_config_no_indices(self):
        """Test that invalid config raises error."""
        config = LoliCodeConfig(selected_indices=[])
        
        with pytest.raises(ValueError) as exc_info:
            await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'No requests selected' in str(exc_info.value)
    
    @pytest.mark.asyncio
    async def test_invalid_config_bad_index(self):
        """Test that invalid index raises error."""
        config = LoliCodeConfig(selected_indices=[99])
        
        with pytest.raises(ValueError) as exc_info:
            await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'Invalid index 99' in str(exc_info.value)
    
    @pytest.mark.asyncio
    async def test_dependency_ordering(self):
        """Test that requests are ordered by dependencies."""
        # Create config with reversed order
        config = LoliCodeConfig(
            selected_indices=[1, 0]  # Reversed
        )
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        # Should still be in correct order
        login_pos = script.find('api/login')
        data_pos = script.find('api/data')
        assert login_pos < data_pos
    
    @pytest.mark.asyncio
    async def test_factory_function(self):
        """Test the factory function."""
        config = LoliCodeConfig(selected_indices=[0])
        
        script = await generate_lolicode(config, self.entries, self.dependency_matrix)
        
        assert 'Generated by HAR2LoliCode' in script
    
    @pytest.mark.asyncio
    async def test_delay_between_requests(self):
        """Test that delays are added between requests."""
        config = LoliCodeConfig(selected_indices=[0, 1])
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'FUNCTION Delay "1000"' in script
    
    @pytest.mark.asyncio
    async def test_default_status_checks(self):
        """Test that default status checks are added."""
        config = LoliCodeConfig(selected_indices=[0])
        
        script = await self.generator.generate(config, self.entries, self.dependency_matrix)
        
        assert 'KEYCHECK SUCCESS' in script
        assert 'Equal "200"' in script
