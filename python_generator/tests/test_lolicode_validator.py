"""Tests for LoliCodeValidator."""

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from generator.validators.lolicode_validator import LoliCodeValidator


class TestLoliCodeValidator:
    """Tests for LoliCodeValidator."""
    
    def setup_method(self):
        """Set up test fixtures."""
        self.validator = LoliCodeValidator()
    
    def test_valid_script(self):
        """Test validation of a valid script."""
        script = '''# Generated by HAR2LoliCode
REQUEST "https://example.com/api/test"
  "User-Agent: Mozilla/5.0"
KEYCHECK SUCCESS
  KEY "<RESPONSE.STATUS>" Equal "200"
'''
        
        result = self.validator.validate(script)
        
        assert result.is_valid is True
        assert len(result.errors) == 0
    
    def test_empty_script(self):
        """Test validation of empty script."""
        result = self.validator.validate('')
        
        assert result.is_valid is False
        assert 'Script is empty' in result.errors[0]
    
    def test_script_with_undefined(self):
        """Test validation of script with undefined values."""
        script = 'REQUEST "undefined"'
        
        result = self.validator.validate(script)
        
        assert result.is_valid is False
        assert any('undefined' in error for error in result.errors)
    
    def test_script_with_none(self):
        """Test validation of script with None values."""
        script = 'REQUEST "None"'
        
        result = self.validator.validate(script)
        
        assert result.is_valid is False
        assert any('None' in error for error in result.errors)
    
    def test_unmatched_quotes(self):
        """Test validation of script with unmatched quotes."""
        script = 'REQUEST "https://example.com'
        
        result = self.validator.validate(script)
        
        assert result.is_valid is False
        assert any('Unmatched quotes' in error for error in result.errors)
    
    def test_empty_request_block(self):
        """Test validation of script with empty REQUEST block."""
        script = 'REQUEST'
        
        result = self.validator.validate(script)
        
        assert result.is_valid is False
        assert any('Empty or invalid REQUEST block' in error for error in result.errors)
    
    def test_multiple_errors(self):
        """Test validation of script with multiple errors."""
        script = '''REQUEST
REQUEST "undefined"
'''
        
        result = self.validator.validate(script)
        
        assert result.is_valid is False
        assert len(result.errors) >= 2
    
    def test_whitespace_only_script(self):
        """Test validation of whitespace-only script."""
        result = self.validator.validate('   \n   \n   ')
        
        assert result.is_valid is False
        assert 'Script is empty' in result.errors[0]
    
    def test_validation_result_to_dict(self):
        """Test conversion of validation result to dictionary."""
        script = 'REQUEST "https://example.com"'
        result = self.validator.validate(script)
        
        result_dict = result.to_dict()
        
        assert 'is_valid' in result_dict
        assert 'errors' in result_dict
        assert isinstance(result_dict['is_valid'], bool)
        assert isinstance(result_dict['errors'], list)
